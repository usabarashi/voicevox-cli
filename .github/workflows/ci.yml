name: CI

on:
  pull_request:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-test:
    name: Build & Test (Apple Silicon)
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Nix with cache
        uses: cachix/install-nix-action@fc6e360bedc9ee72d75e701397f0bb30dce77568 # v31.5.2
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Cachix
        uses: cachix/cachix-action@0fc020193b5a1fa3ac4575aa3a7d3aa6a35435ad # v16
        with:
          name: voicevox-cli
          extraPullNames: nix-community
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Pre-fetch dependencies
        run: |
          echo "Pre-fetching dependencies for cache..."
          nix flake metadata --accept-flake-config --json > /dev/null 2>&1 || true
          nix flake show --accept-flake-config --json > /dev/null 2>&1 || true

      - name: Check Nix flake
        run: |
          echo "Checking Nix flake..."
          nix flake check --accept-flake-config --show-trace

      - name: Verify Rust toolchain
        run: |
          echo "Verifying Rust toolchain..."
          nix develop --accept-flake-config --command rustc --version
          nix develop --accept-flake-config --command cargo --version

      - name: Check code formatting
        run: |
          echo "Checking code formatting..."
          nix develop --accept-flake-config --command cargo fmt --check

      - name: Run Clippy analysis
        run: |
          echo "Running clippy analysis..."
          nix develop --accept-flake-config --command cargo clippy --all-targets --all-features -- -D warnings

      - name: Check scripts
        run: |
          echo "Checking scripts..."
          echo "Checking for required scripts..."
          test -f scripts/voicevox-setup.sh || (echo "Missing voicevox-setup.sh" && exit 1)

          echo "Validating all scripts..."
          for script in scripts/*.sh; do
            if [[ -f "$script" ]]; then
              echo "  - Validating: $(basename "$script")"
              if grep -q '@@.*@@' "$script"; then
                sed 's/@@[^@]*@@/placeholder/g' "$script" | bash -n
              else
                bash -n "$script"
              fi
            fi
          done
          echo "All scripts validated successfully"

      - name: Run security audit
        run: |
          echo "Running security audit..."
          if ! nix develop --accept-flake-config --command cargo audit --version >/dev/null 2>&1; then
            echo "Installing cargo-audit..."
            nix develop --accept-flake-config --command cargo install cargo-audit
          fi
          nix develop --accept-flake-config --command cargo audit

      - name: Build with Nix
        run: |
          echo "Building project with Nix..."
          nix build --accept-flake-config --show-trace

      - name: Verify build artifacts
        run: |
          echo "Verifying build artifacts..."
          if [[ -d result/bin ]]; then
            ls -la result/bin/
            echo "Build artifacts verified"
          else
            echo "Build artifacts not found"
            exit 1
          fi

      - name: Verify build artifacts detailed
        run: |
          echo "Verifying build artifacts..."
          ls -la result/bin/
          file result/bin/voicevox-say
          file result/bin/voicevox-daemon
          file result/bin/voicevox-mcp-server
          test -x result/bin/voicevox-setup
          echo "All binaries built successfully"

      - name: Test functionality
        run: |
          echo "Testing functionality..."
          result/bin/voicevox-say --help || echo "Help command test"
          result/bin/voicevox-daemon --help || echo "Help command test"
          result/bin/voicevox-mcp-server --help || echo "Help command test"
          result/bin/voicevox-setup --help || echo "Setup script test"
          result/bin/voicevox-say --version || echo "Version command not available"

      - name: Package verification
        run: |
          echo "Package verification..."
          echo "Binary sizes:"
          ls -lah result/bin/
          echo "Static linking verification:"
          otool -L result/bin/voicevox-say | grep -E "(voicevox|onnx)" || echo "Static linking verified"
          echo "Total package size:"
          du -sh result/

      - name: Warm up cache (main branch only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Warming up cache for future builds..."
          nix-store -qR ./result | xargs -I {} nix copy {} --to "https://voicevox-cli.cachix.org" || true
