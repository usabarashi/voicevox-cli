name: Update Nix Flake

on:
  schedule:
    - cron: '0 1 1 * *'
  workflow_dispatch:
    inputs:
      update-all:
        description: 'Update all flake inputs'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  pull-requests: write
  actions: read
  checks: read

jobs:
  update-flake:
    name: Update Nix flake inputs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nix
        uses: cachix/install-nix-action@fc6e360bedc9ee72d75e701397f0bb30dce77568 # v31.5.2
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Configure git
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Update flake.lock
        id: update
        run: |
          echo "Updating Nix flake inputs..."
          
          # Save current state for rollback
          cp flake.lock flake.lock.backup

          # Capture update output with proper error handling
          if ! UPDATE_OUTPUT=$(nix flake update 2>&1); then
            echo "::error::Failed to update flake inputs"
            echo "$UPDATE_OUTPUT"
            # Rollback on failure
            mv flake.lock.backup flake.lock
            exit 1
          fi
          echo "$UPDATE_OUTPUT"

          # Check if there are changes
          if git diff --quiet flake.lock; then
            echo "No updates available"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          else
            echo "Updates found"
            echo "has_updates=true" >> $GITHUB_OUTPUT

            # Generate update summary
            echo "update_summary<<EOF" >> $GITHUB_OUTPUT
            echo "### Flake Input Updates" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            git diff --stat flake.lock >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "#### Detailed Changes:" >> $GITHUB_OUTPUT
            echo '```diff' >> $GITHUB_OUTPUT
            git diff flake.lock | head -100 >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Run flake check
        if: steps.update.outputs.has_updates == 'true'
        run: |
          echo "Running flake check to verify updates..."
          if ! nix flake check --show-trace; then
            echo "::error::Flake check failed with new dependencies"
            # Rollback changes
            git checkout -- flake.lock
            echo "::notice::Rolled back flake.lock due to failed checks"
            exit 1
          fi

      - name: Create Pull Request
        if: steps.update.outputs.has_updates == 'true'
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(deps): update nix flake inputs"
          title: "chore(deps): Update Nix flake inputs"
          body: |
            ## Automated Nix Flake Update

            This PR updates the Nix flake inputs to their latest versions.

            ${{ steps.update.outputs.update_summary }}

            ### Checklist
            - [ ] Review dependency changes
            - [ ] Verify build passes
            - [ ] Test functionality remains intact

            ---
            *This PR was automatically created by the Update Nix Flake workflow.*
          branch: update-flake-inputs
          base: develop
          delete-branch: true
          labels: |
            dependencies
            nix
            automated
      
      - name: Report workflow status
        if: always()
        run: |
          if [ "${{ steps.update.outputs.has_updates }}" == "true" ]; then
            echo "Nix flake update workflow completed successfully"
            echo "Status: ${{ job.status }}"
          else
            echo "No updates available - workflow skipped"
          fi

